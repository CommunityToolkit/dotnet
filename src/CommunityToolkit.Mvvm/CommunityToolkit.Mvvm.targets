<Project>

  <!-- Get the analyzer from the CommunityToolkit.Mvvm NuGet package -->
  <Target Name="MVVMToolkitGatherAnalyzers">
    <ItemGroup>
      <MVVMToolkitAnalyzer Include="@(Analyzer)" Condition="'%(Analyzer.NuGetPackageId)' == 'CommunityToolkit.Mvvm'" />
    </ItemGroup>
  </Target>

  <!-- Remove the analyzer if using Roslyn 3.x (incremental generators require Roslyn 4.x) -->
  <Target Name="MVVMToolkitRemoveAnalyzersForRoslyn3"
          Condition="'$(CSharpCoreTargetsPath)' != ''"
          AfterTargets="ResolvePackageDependenciesForBuild;ResolveNuGetPackageAssets"
          DependsOnTargets="MVVMToolkitGatherAnalyzers">

    <!--
        Use the CSharpCoreTargetsPath property to find the version of the compiler we are using. This is the same mechanism
        MSBuild uses to find the compiler. We could check the assembly version for any compiler assembly (since they all have
        the same version) but Microsoft.Build.Tasks.CodeAnalysis.dll is where MSBuild loads the compiler tasks from so if
        someone is getting creative with msbuild tasks/targets this is the "most correct" assembly to check.
    -->
    <GetAssemblyIdentity AssemblyFiles="$([System.IO.Path]::Combine(`$([System.IO.Path]::GetDirectoryName($(CSharpCoreTargetsPath)))`,`Microsoft.Build.Tasks.CodeAnalysis.dll`))">
      <Output TaskParameter="Assemblies" ItemName="MVVMToolkitCurrentCompilerAssemblyIdentity"/>
    </GetAssemblyIdentity>

    <PropertyGroup>
      <!-- Transform the resulting item from GetAssemblyIdentity into a property representing its assembly version -->
      <MVVMToolkitCurrentCompilerVersion>@(MVVMToolkitCurrentCompilerAssemblyIdentity->'%(Version)')</MVVMToolkitCurrentCompilerVersion>

      <!-- The CurrentCompilerVersionIsNotNewEnough property can now be defined based on the Roslyn assembly version -->
      <MVVMToolkitCurrentCompilerVersionIsNotNewEnough Condition="$([MSBuild]::VersionLessThan($(MVVMToolkitCurrentCompilerVersion), 4.0))">true</MVVMToolkitCurrentCompilerVersionIsNotNewEnough>
    </PropertyGroup>

    <!-- If the Roslyn version is < 4.0, disable the source generators -->
    <ItemGroup Condition ="'$(MVVMToolkitCurrentCompilerVersionIsNotNewEnough)' == 'true'">
      <Analyzer Remove="@(MVVMToolkitAnalyzer)"/>
    </ItemGroup>

    <!--
        If the source generators are disabled, also emit a warning. This would've been produced by MSBuild itself as well, but
        emitting this manually lets us customize the message to inform developers as to why exactly the generators have been
        disabled, and that the rest of the MVVM Toolkit will still keep working as intended, just without additional features.
    -->
    <Warning Condition ="'$(MVVMToolkitCurrentCompilerVersionIsNotNewEnough)' == 'true'" Text="The MVVM Toolkit source generators have been disabled on the current configuration, as they need Roslyn 4.x in order to work. The MVVM Toolkit will work just fine, but features relying on the source generators will not be available."/>
  </Target>

  <!--
      Manually remove duplicate analyzers if Roslyn component versioning is not supported (ie. if a legacy .csproj project is used).
      This target is only run if Roslyn 4.0 or greater is present, as otherwise all analyzers would have already been removed anyway.
  -->
  <Target Name="MVVMToolkitRemoveDuplicateAnalyzersWhenRoslynComponentVersioningIsNotSupported"
          Condition="'$(MVVMToolkitCurrentCompilerVersionIsNotNewEnough)' != 'true' AND '$(SupportsRoslynComponentVersioning)' != 'true'"
          AfterTargets="ResolvePackageDependenciesForBuild;ResolveNuGetPackageAssets"
          DependsOnTargets="MVVMToolkitRemoveAnalyzersForRoslyn3">

    <!--
        This switch manually implements Roslyn component versioning. That is, it checks the current version of Roslyn and
        removes and removes all analyzers except the highest version that is supported. The fallback is just Roslyn 4.0.
    -->
    <PropertyGroup>
      <MVVMToolkitSelectedRoslynAnalyzerDirectoryName Condition="$([MSBuild]::VersionGreaterThanOrEquals($(MVVMToolkitCurrentCompilerVersion), 4.3))">roslyn4.3</MVVMToolkitSelectedRoslynAnalyzerDirectoryName>
      <MVVMToolkitSelectedRoslynAnalyzerDirectoryName Condition="'$(MVVMToolkitSelectedRoslynAnalyzerDirectoryName)' == ''">roslyn4.0</MVVMToolkitSelectedRoslynAnalyzerDirectoryName>
    </PropertyGroup>

    <!--
        This condition is a bit convoluted, but it's essentially just selecting all analyzers from the NuGet package that don't have the target Roslyn directory name in their full path.
        For instance, if Roslyn 4.3 is the highest supported version, the target directory name will be "roslyn 4.3", and this condition will filter out all analyzers with a path such
        as: "C:\...\.nuget\...\CommunityToolkit.Mvvm\analyzers\roslyn4.0\cs\CommunityToolkit.Mvvm". The [System.String]::Concat trick is used to achieve two things: we can't directly
        invoke a property function (ie. Contains in this case) on a metadata item, so we need an intermediate string to invoke it on. We could also use [System.String]::new, but using
        Concat is more efficient as it'll just skip the allocation entirely if one of the two inputs is an empty string, which is the case here.
    -->
    <ItemGroup>
      <Analyzer Remove="@(MVVMToolkitAnalyzer)" Condition="!$([System.String]::Concat('', '%(MVVMToolkitAnalyzer.FullPath)').Contains('$(MVVMToolkitSelectedRoslynAnalyzerDirectoryName)'))"/>
    </ItemGroup>
  </Target>

  <!-- Remove the analyzer if Roslyn is missing -->
  <Target Name="MVVMToolkitRemoveAnalyzersForRosynNotFound"
          Condition="'$(CSharpCoreTargetsPath)' == ''"
          AfterTargets="ResolvePackageDependenciesForBuild;ResolveNuGetPackageAssets"
          DependsOnTargets="MVVMToolkitGatherAnalyzers">

    <!-- If no Roslyn assembly could be found, just remove the analyzer without emitting a warning -->
    <ItemGroup>
      <Analyzer Remove="@(MVVMToolkitAnalyzer)"/>
    </ItemGroup>
  </Target>

</Project>