<Project>

  <!-- Get the analyzer from the 'CommunityToolkit.Mvvm' NuGet package -->
  <Target Name="MVVMToolkit_GatherAnalyzers">
    <ItemGroup>
      <MVVMToolkit_Analyzer Include="@(Analyzer)" Condition="'%(Analyzer.NuGetPackageId)' == 'CommunityToolkit.Mvvm'" />
    </ItemGroup>
  </Target>

  <!-- Remove the analyzer if using Roslyn 3.x (incremental generators require Roslyn 4.x) -->
  <Target Name="MVVMToolkit_RemoveAnalyzers_WhenRoslynVersionIsNotSupported"
          Condition="'$(CSharpCoreTargetsPath)' != ''"
          AfterTargets="ResolvePackageDependenciesForBuild;ResolveNuGetPackageAssets"
          DependsOnTargets="MVVMToolkit_GatherAnalyzers">

    <!--
        Use the 'CSharpCoreTargetsPath' property to find the version of the compiler we are using. This is the same mechanism
        MSBuild uses to find the compiler. We could check the assembly version for any compiler assembly (since they all have
        the same version) but 'Microsoft.Build.Tasks.CodeAnalysis.dll' is where MSBuild loads the compiler tasks from so if
        someone is getting creative with msbuild tasks/targets this is the "most correct" assembly to check.
    -->
    <GetAssemblyIdentity AssemblyFiles="$([System.IO.Path]::Combine($([System.IO.Path]::GetDirectoryName($(CSharpCoreTargetsPath))), 'Microsoft.Build.Tasks.CodeAnalysis.dll'))">
      <Output TaskParameter="Assemblies" ItemName="MVVMToolkit_CurrentCompilerAssemblyIdentity"/>
    </GetAssemblyIdentity>

    <PropertyGroup>
      <!-- Transform the resulting item from 'GetAssemblyIdentity' task into a property representing its assembly version -->
      <MVVMToolkit_CurrentCompilerVersion>@(MVVMToolkit_CurrentCompilerAssemblyIdentity->%(Version))</MVVMToolkit_CurrentCompilerVersion>

      <!-- The 'MVVMToolkit_CurrentCompilerIsNotNewEnough' property can now be defined based on the Roslyn assembly version -->
      <MVVMToolkit_CurrentCompilerIsNotNewEnough Condition="$([MSBuild]::VersionLessThan($(MVVMToolkit_CurrentCompilerVersion), 4.0))">true</MVVMToolkit_CurrentCompilerIsNotNewEnough>
    </PropertyGroup>

    <!-- If the Roslyn version is < 4.0, disable the source generators -->
    <ItemGroup Condition ="'$(MVVMToolkit_CurrentCompilerIsNotNewEnough)' == 'true'">
      <Analyzer Remove="@(MVVMToolkit_Analyzer)"/>
    </ItemGroup>

    <!--
        If the source generators are disabled, also emit a warning. This would've been produced by MSBuild itself as well, but
        emitting this manually lets us customize the message to inform developers as to why exactly the generators have been
        disabled, and that the rest of the MVVM Toolkit will still keep working as intended, just without additional features.
    -->
    <Warning Condition ="'$(MVVMToolkit_CurrentCompilerIsNotNewEnough)' == 'true'" Text="The MVVM Toolkit source generators have been disabled on the current configuration, as they need Roslyn 4.x in order to work. The MVVM Toolkit will work just fine, but features relying on the source generators will not be available."/>
  </Target>

  <!--
      Manually remove additional analyzers if Roslyn component versioning is not supported (i.e., if a legacy .csproj project is used).
      This target is only run if Roslyn 4.0 or greater is present, as otherwise all analyzers would have already been removed anyway.
  -->
  <Target Name="MVVMToolkit_RemoveAdditionalAnalyzers_WhenRoslynComponentVersioningIsNotSupported"
          Condition="'$(MVVMToolkit_CurrentCompilerIsNotNewEnough)' != 'true' AND '$(SupportsRoslynComponentVersioning)' != 'true'"
          AfterTargets="ResolvePackageDependenciesForBuild;ResolveNuGetPackageAssets"
          DependsOnTargets="MVVMToolkit_RemoveAnalyzers_WhenRoslynVersionIsNotSupported">

    <!--
        This switch manually implements Roslyn component versioning. That is, it checks the current version of Roslyn and
        removes and removes all analyzers except the highest version that is supported. The fallback is just Roslyn 4.0.
    -->
    <PropertyGroup>
      <MVVMToolkit_SelectedRoslynAnalyzerTarget Condition="$([MSBuild]::VersionGreaterThanOrEquals($(MVVMToolkit_CurrentCompilerVersion), 4.3))">roslyn4.3</MVVMToolkit_SelectedRoslynAnalyzerTarget>
      <MVVMToolkit_SelectedRoslynAnalyzerTarget Condition="'$(MVVMToolkit_SelectedRoslynAnalyzerTarget)' == ''">roslyn4.0</MVVMToolkit_SelectedRoslynAnalyzerTarget>
    </PropertyGroup>

    <!--
        The following line is just removing all the analyzers present in the NuGet package from the `Analyzer` item list
        that doesn't have the target Roslyn identifier as the folder name in their full path.

        For Example:
        If Roslyn 4.3 is the highest supported version, the Roslyn identifier (aka folder name) will be `roslyn4.3`, and
        this condition will remove all analyzers with a path such as: "[CommunityToolkit.Mvvm]\analyzers\roslyn4.0\cs\*.dll".

        Here, We can't directly invoke a property function (ie. `Contains` in this case) on a metadata item,
        so we need an intermediate string to invoke it on. We could have used `[System.String]::new()` method,
        but it allocates in the .NET Framework runtime. Instead, we use `[System.String]::Copy` which doesn't allocate.
    -->
    <ItemGroup>
      <Analyzer Remove="@(MVVMToolkit_Analyzer)" Condition="!$([System.String]::Copy(%(MVVMToolkit_Analyzer.FullPath)).Contains($(MVVMToolkit_SelectedRoslynAnalyzerTarget)))"/>
    </ItemGroup>
  </Target>

  <!-- Remove the analyzer if Roslyn is missing or the project is not using C# -->
  <Target Name="MVVMToolkit_RemoveAnalyzers_WhenRoslynIsNotFound"
          Condition="'$(CSharpCoreTargetsPath)' == ''"
          AfterTargets="ResolvePackageDependenciesForBuild;ResolveNuGetPackageAssets"
          DependsOnTargets="MVVMToolkit_GatherAnalyzers">

    <!-- If no Roslyn assembly could be found, just remove the analyzer without emitting a warning -->
    <ItemGroup>
      <Analyzer Remove="@(MVVMToolkit_Analyzer)"/>
    </ItemGroup>
  </Target>

</Project>