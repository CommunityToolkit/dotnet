<Project>

  <!--
      Use 'GenerateNuSpecDependsOn' extensibility point to include custom global assets in the package.
      Use 'TargetsForTfmSpecificContentInPackage' extensibility point to include custom TFM-specific assets in the package.
  -->
  <PropertyGroup>
    <GenerateNuSpecDependsOn>_GetNonReferencingProjectBuildOutputs;_AddGlobalPackageFilesToNuGetPack;$(GenerateNuSpecDependsOn)</GenerateNuSpecDependsOn>
    <TargetsForTfmSpecificContentInPackage>_AddPackageFilesPerTargetFrameworkToNuGetPack</TargetsForTfmSpecificContentInPackage>
  </PropertyGroup>

<!--
    =====================================================================================================================================================
                                                              Generic PackageFile support
    =====================================================================================================================================================
-->

  <!--
      When the '$(IncludeContentInPack)' property is false, files specified via '@(None)', '@(Content)' items
      are excluded from the NuGet package. Adding '@(PackageFile)' items directly to '%(_PackageFiles)' item
      via the following target ensures that they will always be included in the package.

      So, Use '%(PackageFile)' item to always include files in the package. By default, they are included in
      the root of the package but can be overridden via '%(PackageFile.TargetPath)' metadata. Since, 'TargetPath'
      is just an alias of the 'PackagePath' metadata, multiple paths and different file names can also be specified.
  -->
  <Target Name="_AddGlobalPackageFilesToNuGetPack"
          AfterTargets="_CalculateInputsOutputsForPack">
    <ItemGroup>
      <_PackageFiles Include="@(PackageFile)" Exclude="@(PackageFile->WithMetadataValue('IsSpecific', 'true'))" Condition="'%(PackageFile.Pack)' != 'false'">
        <PackagePath Condition="'%(PackageFile.TargetPath)' != ''">%(PackageFile.TargetPath)</PackagePath>
      </_PackageFiles>
      <!-- Use the 'FinalOutputPath' metadata to mark the inputs thus enabling incremental builds -->
      <NuGetPackInput Include="@(_PackageFiles->WithMetadata('FinalOutputPath')->%(FinalOutputPath))" />
    </ItemGroup>
  </Target>

  <!--
      Same 'PackageFile' as above but processed per target framework when 'IsSpecific: True' metadata is specified.
      Since it is target specific, it also validates whether the package path contains the current framework alias.
  -->
  <Target Name="_AddPackageFilesPerTargetFrameworkToNuGetPack">
    <ItemGroup>
      <TFMSpecificPackageFile Include="@(PackageFile->WithMetadataValue('IsSpecific', 'true'))" Condition="'%(PackageFile.Pack)' != 'false'">
        <PackagePath Condition="'%(PackageFile.TargetPath)' != ''">%(PackageFile.TargetPath)</PackagePath>
      </TFMSpecificPackageFile>
    </ItemGroup>

    <!-- Error out when the target path of the package file doesn't contain target framework to differentiate itself within the package -->
    <Error Code="NCTDEV02" Condition="!$([System.String]::new(%(PackagePath)).Contains($(TargetFramework))) AND @(TFMSpecificPackageFile->Count()) != 0"
             Text="The package file ('%(Identity)') is 'TargetFramework' specific and should include the value ('$(TargetFramework)') somewhere in the target path ('%(PackagePath)')." />
  </Target>

<!--
    =====================================================================================================================================================
                                                              Pack Non-Referencing Projects
    =====================================================================================================================================================
-->

  <!--
      Pack non-referencing project's build outputs to the correct package folders depending on their intended usage.
      The following target uses 'GenerateNuSpecDependsOn' extensibility point to pack the build assets
      by using the custom 'GetBuildOutputs' target imported within the target project.
  -->
  <Target Name="_GetNonReferencingProjectBuildOutputs">
    <!-- Get the build outputs of projects which don't reference the output assembly -->
    <MSBuild
      Projects="@(ProjectReference->WithMetadataValue('ReferenceOutputAssembly', 'false'))"
      Targets="GetBuildOutputs">
      <Output TaskParameter="TargetOutputs" ItemName="NonReferencingProjectBuildOutput" />
    </MSBuild>
  </Target>

  <Target Name="_PackNonReferencingProjectBuildOutputs"
          DependsOnTargets="_GetNonReferencingProjectBuildOutputs"
          BeforeTargets="_AddGlobalPackageFilesToNuGetPack"
          Condition="'$(PackNonReferencingProjects)' == 'true'">

    <!-- Include the Build Outputs (also for each Custom target, like Roslyn analyzers and generators) in the package -->
    <ItemGroup>
      <_NonReferencingProjectPackageFile Include="@(NonReferencingProjectBuildOutput->ClearMetadata())">
        <TargetPath Condition="'%(IsCompilerExtension)' == 'true'">$([System.IO.Path]::Combine('analyzers', 'dotnet', '%(TargetCompiler)', '%(TargetLanguage)'))</TargetPath>
        <TargetPath Condition="'%(IsCompilerExtension)' != 'true'">$([System.IO.Path]::Combine('tools', '%(TargetFramework)'))</TargetPath>
      </_NonReferencingProjectPackageFile>
      <PackageFile Include="@(_NonReferencingProjectPackageFile)" />
      <_NonReferencingProjectPackageFile Remove="@(_NonReferencingProjectPackageFile)" />
    </ItemGroup>
  </Target>

</Project>