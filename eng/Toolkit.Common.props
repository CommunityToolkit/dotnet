<Project>

  <PropertyGroup>
    <EnforceCodeStyleInBuild>true</EnforceCodeStyleInBuild>
  </PropertyGroup>

  <PropertyGroup>
    <AllowUnsafeBlocks>true</AllowUnsafeBlocks>
    <LangVersion>11.0</LangVersion>
    <Nullable>enable</Nullable>

    <!--
      Suppress ref safety warnings in unsafe contexts (see https://github.com/dotnet/csharplang/issues/6476).
      This is used eg. to replace Unsafe.SizeOf<T>() calls with just sizeof(T). The warning is not necessary
      since in order to use these APIs the caller already has to be in an unsafe context.
    -->
    <NoWarn>$(NoWarn);CS8500</NoWarn>
  </PropertyGroup>

  <PropertyGroup>
    <SignAssembly>true</SignAssembly>
    <AssemblyOriginatorKeyFile>$(MSBuildThisFileDirectory)toolkit.snk</AssemblyOriginatorKeyFile>
    <AssemblySignPublicKeyFile>$(MSBuildThisFileDirectory)toolkit.spk</AssemblySignPublicKeyFile>
    <AssemblySignPublicKey>$([System.IO.File]::ReadAllText($(AssemblySignPublicKeyFile)))</AssemblySignPublicKey>
  </PropertyGroup>

  <PropertyGroup>
    <ContinuousIntegrationBuild>$(TF_BUILD)</ContinuousIntegrationBuild>
    <SourceLinkEnabled>$(ContinuousIntegrationBuild)</SourceLinkEnabled>
  </PropertyGroup>

  <!-- Identify projects targeting multiple Roslyn versions and add defaults -->
  <PropertyGroup Condition="$(MSBuildProjectName.Contains('.Roslyn'))">
    <IsCompilerTargeting>True</IsCompilerTargeting>
    <TargetCompilerIdentifier>Roslyn</TargetCompilerIdentifier>
    <!-- TODO: Update the supported Compiler versions here as new ones get released -->
    <SupportedCompilerVersions>4.0;4.1;4.2;4.3;4.4;4.5</SupportedCompilerVersions>
  </PropertyGroup>

  <!-- Use custom build logic for projects targeting multiple version of the Roslyn Compiler -->
  <Import Project="Toolkit.CompilerTargeting.props" Condition="'$(IsCompilerTargeting)' == 'true'" />

</Project>